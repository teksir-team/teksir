# -*- coding: utf-8 -*-
"""Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A2yrsC6LgAonf_V25kwRfGujoczwVKMG
"""

import pandas as pd
from sklearn.model_selection import train_test_split

!pip install fasttext
import fasttext

ttc_df = pd.read_csv("/content/drive/My Drive/Teksir Takım Çalışması/Datasets/ttc_3600.csv" ,sep=",")
ttc_df

import re
for i,row in ttc_df.iterrows():
  text = row["text"]
  text = re.sub(r"[^A-ZĞÜŞİÖÇa-zğüışöç0-9]", " ", text)
  ttc_df["text"][i]=text

for i,row in ttc_df.iterrows():
    label = row["label"]
    text = " "+row["text"] 
    ttc_df["text"][i]=text
    label="__label__"+row["label"]
    ttc_df["label"][i]=label

X_train, X_test = train_test_split(ttc_df, test_size=0.2, random_state=42)

with open("X_tr.train", "w") as f:
    for idx, sample in X_train.iterrows():
        write_text = sample.values[0] + ' ' + sample.values[1] + '\n'
        f.write(write_text)

with open("X_test.test", "w") as f:
    for idx, sample in X_test.iterrows():
        write_text = sample.values[0] + ' ' + sample.values[1] + '\n'
        f.write(write_text)



X_train.label.value_counts()

X_test.label.value_counts()

X_train.head()



import random
import numpy as np

def fix_random_seeds(seed):
    random.seed(seed)
    np.random.seed(seed)

seed = 42
fix_random_seeds(seed)

class Classifier:
  
  def fit(self):
    pass

  def predict(self):
    pass


class FasttextClassifier:

  def __init__(self,params):
    self.params=params
    self.is_fitted=False
    self.preProcess=r"[^A-ZĞÜŞİÖÇa-zğüışöç0-9]"
    
    pass

  def fit(self,X_train):
    self.model = fasttext.train_supervised(input=X_train, **self.params)
    self.is_fitted=True
    return self.model

  def textPreprocess(self,txt):
    text=txt
    text = re.sub(r"[^A-ZĞÜŞİÖÇa-zğüışöç0-9]", " ", text)
    return text

  def setPreprocess(self,preProcess):
    self.preProcess=preProcess
    return self.preProcess

  def predict(self,txt):

    if not self.is_fitted:
      raise Exception("Please fit the model first")
      return 0
    text=txt
    text = re.sub(self.preProcess, " ", text)
    #text=textPreprocess(txt)
    
    self.prediction=self.model.predict(text)
    return self.prediction
  
  
    
class PytorchClassifier(Classifier):
  
  pass

params={"lr":1.0,"epoch":25,"wordNgrams":2}
ft=FasttextClassifier(params)

model=ft.fit("X_tr.train")

model.test("X_test.test")

ft.predict("aslan")

!head X_tr.train

